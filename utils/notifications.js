// src/utils/notifications.js
import * as Notifications from 'expo-notifications';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { parseISO, isAfter } from 'date-fns';

/** –ö–∞–Ω–∞–ª –¥–ª—è Android (–∑–≤—É–∫/–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ */
export async function setupAndroidChannel() {
  try {
    await Notifications.setNotificationChannelAsync('birthdays', {
      name: 'Birthdays',
      importance: Notifications.AndroidImportance.DEFAULT,
      sound: true,
      vibrationPattern: [0, 250, 250, 250],
      lockscreenVisibility: Notifications.AndroidNotificationVisibility.PUBLIC,
    });
  } catch (e) {
    console.log('setupAndroidChannel error', e);
  }
}

/** –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (iOS/Android) */
export async function requestNotificationPermissions() {
  const { status } = await Notifications.requestPermissionsAsync();
  return status === 'granted';
}

/** –ü–æ—Å—á–∏—Ç–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É –î–† (–≤ —ç—Ç–æ–º –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É), 10:00 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ */
export function getNextBirthdayDate(birthDateISO, hour = 10, minute = 0) {
  const birthDate = parseISO(birthDateISO); // "YYYY-MM-DD"
  const now = new Date();

  let trigger = new Date(
    now.getFullYear(),
    birthDate.getMonth(),
    birthDate.getDate(),
    hour,
    minute,
    0,
    0
  );

  // –µ—Å–ª–∏ –≤ —ç—Ç–æ–º –≥–æ–¥—É —É–∂–µ –ø—Ä–æ—à–ª–æ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
  if (!isAfter(trigger, now)) {
    trigger.setFullYear(trigger.getFullYear() + 1);
  }
  return trigger;
}

/** –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è */
export async function scheduleBirthdayNotification(person) {
  try {
    const triggerDate = getNextBirthdayDate(person.birthDate, 10, 0);

    // –ù–∞ Android –∫–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –∑–∞—Ä–∞–Ω–µ–µ
    await setupAndroidChannel();

    const id = await Notifications.scheduleNotificationAsync({
      content: {
        title: `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${person.name}!`,
        body: person.phone
          ? `–ü–æ–∑–≤–æ–Ω–∏: ${person.phone}`
          : `–ù–µ –∑–∞–±—É–¥—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å üéÇ`,
        sound: true,
      },
      // –î–ª—è iOS/Android –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å Date ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      trigger: triggerDate,
      // –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã,
      // –Ω–æ –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ repeat –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ-–ø–ª–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≥–æ–¥ –≤—Ä—É—á–Ω—É—é.
    });

    return id; // –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω—è—Ç—å
  } catch (e) {
    console.log('scheduleBirthdayNotification error', e);
    return null;
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.
 *  - –î–µ–ª–∞–µ—Ç requestPermissions
 *  - –ü—Ä–æ–±–µ–≥–∞–µ—Ç –ø–æ –≤—Å–µ–º –ª—é–¥—è–º –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –î–†
 *  - –ß—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –¥—É–±–ª–∏, –¥–µ–ª–∞–µ–º —ç—Ç–æ –º–∞–∫—Å–∏–º—É–º 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å (–º–µ—Ç–∫–∞ –≤ AsyncStorage)
 */
const LAST_INIT_KEY = '@notifications:lastInitDate';

export async function initBirthdayNotifications(birthdays) {
  const granted = await requestNotificationPermissions();
  if (!granted) {
    console.log('Notifications not granted');
    return;
  }

  await setupAndroidChannel();

  // –ó–∞—â–∏—Ç–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏
  try {
    const today = new Date().toDateString();
    const last = await AsyncStorage.getItem(LAST_INIT_KEY);
    if (last === today) {
      // —É–∂–µ –¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      return;
    }

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    for (const p of birthdays) {
      await scheduleBirthdayNotification({
        name: p.name,
        phone: p.phone,
        birthDate: p.birthDate,
      });
    }

    await AsyncStorage.setItem(LAST_INIT_KEY, today);
  } catch (e) {
    console.log('initBirthdayNotifications error', e);
  }
}
